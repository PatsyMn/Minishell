module 1 : lexer-parser (pas ton problème)
appellé par : boucle de lecture
entré : une string représentant une commande (potentiellement pipeline)
sortie : une chaine de tokken, exploitable par la suite du système
appelle : module pipe
fait : découpage de la chaine de characters en "mots", gestion de quotes, expensions des variables d'env

module 2 : pipes
appellé par : lexer-parser
entré : une chaine de tokens
sortie : une chaine de tokens avec une seule commande dedans (il peut y avoir plusieurs process chacuns avec leur sortie)
appelle : reddirection
fait : si pas de pipes, fait rien, si pipes, plusieurs fork pour des sous-process, et s'occupe de l'ouverture des pipes, et linkage des fd pour entrées/sorties

module 3 : reddirection
appellé par : pipes
entré : une chaine de tokens à une seule commande
sortie : la commande avec ses arguments (sous la forme d'une chaine de tokens)
appelle : execution
fait : ouvre tous les fichiers spécifiés dans les redirections, et relink les fd en respectant les sens de redirection

module 4 : execution
appellé par : redirection
entré : la commande avec ses arguments
sortie : exit_code (dans la var globale)
appelle : rien
fait : execute la commande, que ça soit avec execve, ou les builtins (fait un fork indépendamment des pipes, sauf pour les builtins)
